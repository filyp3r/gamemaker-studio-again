<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1003</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>paused = false;

menu_opt = ds_list_create();
ds_list_add(menu_opt, "RESUME");
ds_list_add(menu_opt, "ACHIEVEMENTS");
ds_list_add(menu_opt, "OPTIONS");
ds_list_add(menu_opt, "EXIT TO MENU");


state = "PAUSED";


vol_pressed = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!paused){
    if(keyboard_check_pressed(vk_escape)){
        paused = true;
    }
}else{
    draw_set_alpha(0.8);
        draw_rectangle_colour(view_xview, view_yview, view_xview + view_wview, view_yview + view_hview,
                              c_black, c_black, c_black, c_black, 0);
    draw_set_alpha(1);
    
    if(state == "PAUSED"){
        draw_set_halign(fa_center);
        draw_set_valign(fa_top   );
            draw_set_font(Fnt);
            draw_text_colour(view_xview + view_wview / 2, view_yview, "PAUSED", c_red, c_red, c_red, c_red, 1);
            
            for(var i = 0; i &lt; ds_list_size(menu_opt); ++i){
                var _alpha_ = 0.25;
                var _x_ = view_xview + view_wview / 2;
                var _y_ = (view_yview + string_height("A") * 3) + (i * string_height("A"));
                var _c_ = c_white;
                var _t_ = ds_list_find_value(menu_opt, i);
                
                if(mouse_x &gt;= _x_ - string_width(_t_) / 2 &amp;&amp; mouse_x &lt; _x_ + string_width(_t_) / 2
                &amp;&amp; mouse_y &gt;= _y_ &amp;&amp; mouse_y &lt; _y_ + string_height(_t_)){
                    _alpha_ = 1;
                    if(mouse_check_button_pressed(mb_left)){
                        if(_t_ == "RESUME"){
                            paused = false;
                        }else if(_t_ == "ACHIEVEMENTS"){
                            state = "ACHIEVEMENTS";
                        }else if(_t_ == "OPTIONS"){
                            state = "OPTIONS";
                        }else if(_t_ == "EXIT TO MENU"){
                            if(!instance_exists(Obj_FadeIn2)){
                                instance_create(0, 0, Obj_FadeIn2);
                            }
                        }
                        audio_play_sound(Snd_SFX_MouseMenu, 2, 0);
                    }
                }
                
                draw_text_colour(_x_, _y_, _t_, _c_, _c_, _c_, _c_, _alpha_);
            }
        draw_set_halign(fa_left);
        draw_set_valign(fa_top );
    }else if(state == "ACHIEVEMENTS"){
        draw_set_halign(fa_center);
        draw_set_valign(fa_top   );
            draw_set_font(Fnt);
            draw_text_colour(view_xview + view_wview / 2, view_yview, "ACHIEVEMENTS", c_red, c_red, c_red, c_red, 1);
        draw_set_halign(fa_left);
        draw_set_valign(fa_top );
        
        draw_set_halign(fa_left);
        draw_set_valign(fa_top );
            draw_set_font(Fnt2);
            for(var i = 0; i &lt; ds_list_size(global.dsl_cq1); i++){
                if(!global.dsl_cq1[|i]){
                    draw_text_colour(view_xview, (view_yview + string_height("A") * 2) + string_height("A") * i,
                                     global.dsl_cq2[|i], c_white, c_white, c_white, c_white, 0.25);
                }else{
                    draw_text_colour(view_xview, (view_yview + string_height("A") * 2) + string_height("A") * i,
                                     global.dsl_cq2[|i], c_green, c_green, c_green, c_green, 1);
                }
            }
        draw_set_halign(fa_left);
        draw_set_valign(fa_top );
    }else if(state == "OPTIONS"){
        draw_set_halign(fa_center);
        draw_set_valign(fa_top   );
            draw_set_font(Fnt);
            draw_text_colour(view_xview + view_wview / 2, view_yview, "OPTIONS", c_red, c_red, c_red, c_red, 1);
        draw_set_halign(fa_left);
        draw_set_valign(fa_top );
        
        draw_set_halign(fa_center);
        draw_set_valign(fa_top   );
            var __xx__gs = view_xview + view_wview / 2;
            var __yy__gs = view_yview + string_height("A") * 3;
            if(mouse_x &gt;= __xx__gs - string_width("MUSIC: OFF") / 2
            &amp;&amp; mouse_x &lt;  __xx__gs + string_width("MUSIC: OFF") / 2
            &amp;&amp; mouse_y &gt;= __yy__gs
            &amp;&amp; mouse_y &lt;  __yy__gs + string_height("A")){
                if(audio_sound_get_gain(global.game_sound) &gt; 0){
                    if(mouse_check_button_pressed(mb_left)){
                        audio_sound_gain(global.game_sound, 0, 0);
                        audio_pause_sound(global.game_sound);
                        audio_play_sound(Snd_SFX_MouseMenu, 2, 0);
                    }
                    draw_text_colour(__xx__gs, __yy__gs, "MUSIC: ON" , c_white, c_white, c_white, c_white, 1);
                }else{
                    if(mouse_check_button_pressed(mb_left)){
                        audio_sound_gain(global.game_sound, 0.1, 0);
                        audio_resume_sound(global.game_sound);
                        audio_play_sound(Snd_SFX_MouseMenu, 2, 0);
                    }
                    draw_text_colour(__xx__gs, __yy__gs, "MUSIC: OFF", c_white, c_white, c_white, c_white, 1);
                }
            }else{
                if(audio_sound_get_gain(global.game_sound) &gt; 0){
                    draw_text_colour(__xx__gs, __yy__gs, "MUSIC: ON" , c_dkgray, c_dkgray, c_dkgray, c_dkgray, 1);
                }else{
                    draw_text_colour(__xx__gs, __yy__gs, "MUSIC: OFF", c_dkgray, c_dkgray, c_dkgray, c_dkgray, 1);
                }
            }
        draw_set_halign(fa_left);
        draw_set_valign(fa_top );
    }
    
    
    
    if(keyboard_check_pressed(vk_escape)){
        if(state != "PAUSED"){
            state = "PAUSED";
        }else{
            state  = "PAUSED";
            paused = false;
        }
    }
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
